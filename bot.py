import os
import sqlite3
import logging
from datetime import datetime
from pathlib import Path

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),  
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


TOKEN = "8471318802:AAEPQeC1OdlEInX6B7vkGBOJ3EZ3T3h7yVk" 
ADMIN_PASSWORD = Path("admin_password.txt").read_text(encoding="utf-8").strip()
PHOTOS_DIR = Path("photos")
PHOTOS_DIR.mkdir(exist_ok=True)
DATABASE = "database.db"
CHANNEL_ID_FILE = Path("channel_id.txt")
CHANNEL_LINK_FILE = Path("channel_link.txt")


def load_channel_id() -> int | None:
    try:
        if CHANNEL_ID_FILE.exists():
            raw = CHANNEL_ID_FILE.read_text(encoding="utf-8").strip()
            return int(raw)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å channel_id: {e}")
    return None

def save_channel_id(cid: int) -> bool:
    try:
        CHANNEL_ID_FILE.write_text(str(cid), encoding="utf-8")
        logger.info(f"channel_id —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {cid}")
        return True
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å channel_id: {e}")
        return False

def load_channel_link() -> str | None:
    try:
        if CHANNEL_LINK_FILE.exists():
            return CHANNEL_LINK_FILE.read_text(encoding="utf-8").strip() or None
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å channel_link: {e}")
    return None

def save_channel_link(link: str | None) -> None:
    try:
        CHANNEL_LINK_FILE.write_text(link or "", encoding="utf-8")
        logger.info(f"channel_link —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {link}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å channel_link: {e}")

async def generate_channel_link(chat_id: int) -> str | None:

    try:
        chat = await bot.get_chat(chat_id)
        username = getattr(chat, "username", None)
        if username:
            return f"https://t.me/{username}"

        try:
            invite = await bot.create_chat_invite_link(chat_id=chat_id, name="VotingBot link")
            return getattr(invite, "invite_link", None)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É: {e}")
            return None
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞: {e}")
        return None

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


CHANNEL_ID = load_channel_id()
CHANNEL_LINK = load_channel_link()


class AdminForm(StatesGroup):
    waiting_for_password = State()
    choosing_category_for_add = State()
    waiting_for_photo = State()
    waiting_for_name = State()
    choosing_category_for_delete = State()
    waiting_for_channel_bind = State()


def init_db():
    try:
        with sqlite3.connect(DATABASE) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS participants (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    category INTEGER NOT NULL,
                    photo_filename TEXT NOT NULL,
                    votes INTEGER DEFAULT 0,
                    added_at TEXT NOT NULL
                )
            """)
            conn.execute("""
                CREATE TABLE IF NOT EXISTS votes (
                    user_id INTEGER,
                    participant_id INTEGER,
                    PRIMARY KEY (user_id, participant_id)
                )
            """)
            conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

def add_participant(name: str, category: int, photo_filename: str):
    try:
        with sqlite3.connect(DATABASE) as conn:
            conn.execute(
                "INSERT INTO participants (name, category, photo_filename, votes, added_at) VALUES (?, ?, ?, 0, ?)",
                (name, category, photo_filename, datetime.now().isoformat())
            )
            conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏—Ü–∞: {name}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏—Ü—ã: {e}")

def get_participants(category: int, limit=None, offset=0):
    try:
        with sqlite3.connect(DATABASE) as conn:
            cursor = conn.cursor()
            query = "SELECT id, name, photo_filename, votes FROM participants WHERE category = ? ORDER BY votes DESC"
            if limit:
                query += " LIMIT ? OFFSET ?"
                cursor.execute(query, (category, limit, offset))
            else:
                cursor.execute(query, (category,))
            return cursor.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏—Ü: {e}")
        return []

def get_top_3(category: int):
    return get_participants(category, limit=3)

def get_total_count(category: int):
    try:
        with sqlite3.connect(DATABASE) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM participants WHERE category = ?", (category,))
            return cursor.fetchone()[0]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
        return 0

def delete_participant(participant_id: int):
    try:
        with sqlite3.connect(DATABASE) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT photo_filename FROM participants WHERE id = ?", (participant_id,))
            row = cursor.fetchone()
            if row:
                photo_path = PHOTOS_DIR / row[0]
                if photo_path.exists():
                    photo_path.unlink()
                conn.execute("DELETE FROM participants WHERE id = ?", (participant_id,))
                conn.execute("DELETE FROM votes WHERE participant_id = ?", (participant_id,))
                conn.commit()
                logger.info(f"–£—á–∞—Å—Ç–Ω–∏—Ü–∞ —Å ID {participant_id} —É–¥–∞–ª–µ–Ω–∞.")
                return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏—Ü—ã: {e}")
        return False

def record_vote(user_id: int, participant_id: int):
    try:
        with sqlite3.connect(DATABASE) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT participant_id FROM votes WHERE user_id = ?", (user_id,))
            voted = cursor.fetchall()
            if voted:
                return False, "already_voted"
            cursor.execute("INSERT INTO votes (user_id, participant_id) VALUES (?, ?)", (user_id, participant_id))
            cursor.execute("UPDATE participants SET votes = votes + 1 WHERE id = ?", (participant_id,))
            conn.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ {participant_id}")
            return True, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏: {e}")
        return False, "db_error"

def remove_vote(user_id: int):
    try:
        with sqlite3.connect(DATABASE) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT participant_id FROM votes WHERE user_id = ?", (user_id,))
            row = cursor.fetchone()
            if not row:
                return False
            participant_id = row[0]
            conn.execute("DELETE FROM votes WHERE user_id = ?", (user_id,))
            conn.execute("UPDATE participants SET votes = votes - 1 WHERE id = ?", (participant_id,))
            conn.commit()
            logger.info(f"–ì–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–º–µ–Ω—ë–Ω.")
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≥–æ–ª–æ—Å–∞: {e}")
        return False

def get_user_vote(user_id: int):
    try:
        with sqlite3.connect(DATABASE) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT participant_id FROM votes WHERE user_id = ?", (user_id,))
            row = cursor.fetchone()
            return row[0] if row else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ–ª–æ—Å–∞: {e}")
        return None

def get_category_name(category: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É"""
    category_names = {
        1: "–ù–µ–¥–µ–ª—å–Ω–∞—è –Ω–æ–º–∏–Ω–∞—Ü–∏—è",
        2: "–ú–µ—Å—è—á–Ω–∞—è –Ω–æ–º–∏–Ω–∞—Ü–∏—è"
    }
    return category_names.get(category, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}")


def get_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üó≥Ô∏è –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å", callback_data="check_subscription")]
    ])

def get_main_reply_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è"), KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

def get_category_reply_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥"), KeyboardButton(text="üó≥Ô∏è –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

def get_admin_reply_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å"), KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

def get_category_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="rating")],
        [InlineKeyboardButton(text="üó≥Ô∏è –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å", callback_data="vote")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="start")]
    ])

def get_back_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="category")]
    ])

def get_cancel_vote_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –≥–æ–ª–æ—Å", callback_data="unvote")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="category")]
    ])

def get_admin_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏—Ü—É", callback_data="add_participant")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏—Ü—É", callback_data="delete_participant")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª", callback_data="bind_channel")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="start")]
    ])

def get_cancel_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", callback_data="cancel_add")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
    ])

def get_categories_menu(action: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–µ–¥–µ–ª—å–Ω–∞—è –Ω–æ–º–∏–Ω–∞—Ü–∏—è", callback_data=f"{action}_cat_1")],
        [InlineKeyboardButton(text="–ú–µ—Å—è—á–Ω–∞—è –Ω–æ–º–∏–Ω–∞—Ü–∏—è", callback_data=f"{action}_cat_2")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_add")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
    ])

def get_pagination_buttons(category: int, page: int, for_delete: bool = False):
    total = get_total_count(category)
    pages = (total - 1) // 10 + 1
    buttons = []
    row = []
    if page > 0:
        row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"del_page_{category}_{page-1}"
        ))
    if page < pages - 1:
        row.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=f"del_page_{category}_{page+1}"
        ))
    if row:
        buttons.append(row)
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)



@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å –∫—Ä–∞—Å–æ—Ç—ã! üèÜ\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ —É—á–∞—Å—Ç–Ω–∏—Ü\n‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏—Ü\n‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–∫—É—Ä—Å–∞\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üó≥Ô∏è –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å", callback_data="check_subscription")]
        ])
    )
    if CHANNEL_ID is None:
        await message.answer(
            "‚ÑπÔ∏è –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_channel_id -100XXXXXXXXXX –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ø–æ—Å—Ç –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")

@dp.callback_query(F.data.startswith("category_"))
async def category_selected(callback: CallbackQuery, state: FSMContext):
    category = int(callback.data.split("_")[1])
    

    data = await state.get_data()
    if data.get("rating_mode"):

        top_3 = get_top_3(category)
        if not top_3:
            await callback.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏—Ü –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=get_back_button())
            await callback.answer()
            return


        media_group = []
        for pid, name, photo_file, votes in top_3:
            photo_path = PHOTOS_DIR / photo_file
            if photo_path.exists():
                media_group.append(
                    InputMediaPhoto(
                        media=FSInputFile(photo_path),
                        caption=f"üèÜ {name}\n–ì–æ–ª–æ—Å–æ–≤: {votes}"
                    )
                )
        
        msg_ids = []
        if media_group:

            sent_messages = await callback.message.answer_media_group(media_group)
            msg_ids = [msg.message_id for msg in sent_messages]


        text = f"üèÜ **–¢–æ–ø-3 —É—á–∞—Å—Ç–Ω–∏—Ü ({get_category_name(category)}):**\n\n"
        for idx, (pid, name, photo_file, votes) in enumerate(top_3, 1):
            text += f"**{idx}.** {name}\n–ì–æ–ª–æ—Å–æ–≤: {votes}\n\n"

  
        await callback.message.answer(text, reply_markup=get_back_button(), parse_mode="Markdown")
        
     
        await state.update_data(rating_photo_msg_ids=msg_ids)
        await callback.answer()
    else:
       
        await state.update_data(category=category)
        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {get_category_name(category)}. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=get_category_menu()
        )
        await callback.answer()

@dp.callback_query(F.data == "rating")
async def show_rating(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category = data.get("category")
    if not category:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ.", reply_markup=get_main_menu())
        await callback.answer()
        return

    top_3 = get_top_3(category)
    if not top_3:
        await callback.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏—Ü –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=get_back_button())
        await callback.answer()
        return

  
    media_group = []
    for pid, name, photo_file, votes in top_3:
        photo_path = PHOTOS_DIR / photo_file
        if photo_path.exists():
            media_group.append(
                InputMediaPhoto(
                    media=FSInputFile(photo_path),
                    caption=f"üèÜ {name}\n–ì–æ–ª–æ—Å–æ–≤: {votes}"
                )
            )
    
    msg_ids = []
    if media_group:
  
        sent_messages = await callback.message.answer_media_group(media_group)
        msg_ids = [msg.message_id for msg in sent_messages]


    text = f"üèÜ **–¢–æ–ø-3 —É—á–∞—Å—Ç–Ω–∏—Ü ({get_category_name(category)}):**\n\n"
    for idx, (pid, name, photo_file, votes) in enumerate(top_3, 1):
        text += f"**{idx}.** {name}\n–ì–æ–ª–æ—Å–æ–≤: {votes}\n\n"


    await callback.message.answer(text, reply_markup=get_back_button(), parse_mode="Markdown")
    

    await state.update_data(rating_photo_msg_ids=msg_ids)
    await callback.answer()

@dp.callback_query(F.data == "vote")
async def start_voting(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category = data.get("category")
    if not category:
        await callback.message.edit_text(
            "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_menu()
        )
        await state.clear()
        await callback.answer()
        return

    participants = get_participants(category)
    if not participants:
        await callback.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏—Ü –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.", reply_markup=get_back_button())
        await callback.answer()
        return

    user_vote = get_user_vote(callback.from_user.id)
    if user_vote:
        voted_part = next((p for p in participants if p[0] == user_vote), None)
        result = f"‚úÖ –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {voted_part[1]}." if voted_part else "–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏."
        await callback.message.edit_text(result, reply_markup=get_cancel_vote_button())
        await callback.answer()
        return

   
    media_group = []
    for pid, name, photo_file, votes in participants:
        photo_path = PHOTOS_DIR / photo_file
        if photo_path.exists():
            media_group.append(
                InputMediaPhoto(
                    media=FSInputFile(photo_path),
                    caption=f"üó≥Ô∏è {name}\n–ì–æ–ª–æ—Å–æ–≤: {votes}"
                )
            )
    
    if media_group:

        sent_messages = await callback.message.answer_media_group(media_group)
        msg_ids = [msg.message_id for msg in sent_messages]
    else:
        msg_ids = []

    keyboard = []
    for pid, name, _, _ in participants:
        keyboard.append([InlineKeyboardButton(text=f"üó≥Ô∏è {name}", callback_data=f"vote_for_{pid}")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="category")])
    vote_msg = await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏—Ü—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await state.update_data(vote_msg_id=vote_msg.message_id, photo_msg_ids=msg_ids)
    await callback.answer()

@dp.callback_query(F.data.startswith("vote_for_"))
async def process_vote(callback: CallbackQuery, state: FSMContext):
    participant_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id

    if get_user_vote(user_id):
        await callback.answer("–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!", show_alert=True)
        return

    success, _ = record_vote(user_id, participant_id)
    if success:
        data = await state.get_data()
        category = data["category"]

  
        for msg_id in data.get("photo_msg_ids", []):
            try:
                await bot.delete_message(callback.message.chat.id, msg_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ: {e}")

        
        try:
            await bot.delete_message(callback.message.chat.id, data["vote_msg_id"])
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")

      
        participants = get_participants(category)
        participant = next((p for p in participants if p[0] == participant_id), None)
        name = participant[1] if participant else "—É—á–∞—Å—Ç–Ω–∏—Ü—É"

       
        await callback.message.answer(
            f"‚úÖ –í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {name}!",
            reply_markup=get_cancel_vote_button()
        )

       
        try:
            await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        await callback.answer()

@dp.callback_query(F.data == "unvote")
async def unvote(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if remove_vote(user_id):
        data = await state.get_data()
        category = data.get("category")

        await callback.message.answer(
            "‚ùå –í–∞—à –≥–æ–ª–æ—Å –æ—Ç–º–µ–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.",
            reply_markup=get_category_menu()
        )
        try:
            await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Å–≤–æ–π –≥–æ–ª–æ—Å.")
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏).",
            reply_markup=get_back_button()
        )
    await callback.answer()


@dp.message(Command("admin"))
async def admin_command(message: Message, state: FSMContext):
    if message.chat.type != "private":
        await message.answer("–ê–¥–º–∏–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AdminForm.waiting_for_password)

@dp.message(AdminForm.waiting_for_password)
async def check_password(message: Message, state: FSMContext):
    if message.text == ADMIN_PASSWORD:
        await message.answer("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.", reply_markup=get_admin_menu())
        await message.answer(
            text=".",
            reply_markup=get_admin_reply_keyboard()
        )
        await state.set_state(None)
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–æ—à—ë–ª –≤ –ø–∞–Ω–µ–ª—å.")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        logger.warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É: {message.from_user.id}")
        await state.set_state(None)

@dp.callback_query(F.data == "add_participant")
async def choose_category_for_add(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminForm.choosing_category_for_add)
    await callback.message.edit_text("–í –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏—Ü—É?", reply_markup=get_categories_menu("add"))
    await callback.answer()

@dp.callback_query(F.data.startswith("add_cat_"))
async def add_participant_choose_category(callback: CallbackQuery, state: FSMContext):
    category = int(callback.data.split("_")[2])
    await state.update_data(add_category=category)
    await state.set_state(AdminForm.waiting_for_photo)
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —É—á–∞—Å—Ç–Ω–∏—Ü—ã.", reply_markup=get_cancel_button())
    await callback.answer()

@dp.callback_query(F.data == "cancel_add")
async def cancel_add(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_menu())
    await callback.answer()
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏—Ü—ã.")

@dp.message(AdminForm.waiting_for_photo, F.photo)
async def get_photo(message: Message, state: FSMContext):
    try:
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        ext = file.file_path.split('.')[-1]
        filename = f"{message.from_user.id}_{int(datetime.now().timestamp())}.{ext}"
        file_path = PHOTOS_DIR / filename
        await bot.download_file(file.file_path, file_path)

        await state.update_data(photo_filename=filename)
        await state.set_state(AdminForm.waiting_for_name)
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –§–ò–û —É—á–∞—Å—Ç–Ω–∏—Ü—ã.", reply_markup=get_cancel_button())
        logger.info(f"–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ: {filename}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(AdminForm.waiting_for_photo)
async def get_photo_invalid(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ), –∞ –Ω–µ —Ç–µ–∫—Å—Ç.", reply_markup=get_cancel_button())

@dp.message(AdminForm.waiting_for_name)
async def get_name_and_save(message: Message, state: FSMContext):
    try:
        name = message.text.strip()
        if not name:
            await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_cancel_button())
            return

        data = await state.get_data()
        photo_filename = data["photo_filename"]
        category = data["add_category"]

        add_participant(name, category, photo_filename)
        await message.answer(
            f"‚úÖ –£—á–∞—Å—Ç–Ω–∏—Ü–∞ *{name}* –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ {get_category_name(category)}.",
            reply_markup=get_admin_menu(),
            parse_mode="Markdown"
        )
        await state.clear()
        logger.info(f"–£—á–∞—Å—Ç–Ω–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {name}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏—Ü—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

@dp.callback_query(F.data == "delete_participant")
async def choose_category_for_delete(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminForm.choosing_category_for_delete)
    await callback.message.edit_text("–ò–∑ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏—Ü—É?", reply_markup=get_categories_menu("delete"))
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_cat_"))
async def delete_participant_choose_category(callback: CallbackQuery, state: FSMContext):
    category = int(callback.data.split("_")[2])
    await state.update_data(delete_category=category, delete_page=0)
    await show_delete_page(callback, category, 0)
    await callback.answer()

async def show_delete_page(callback: CallbackQuery, category: int, page: int):
    participants = get_participants(category, limit=10, offset=page*10)
    total = get_total_count(category)
    pages = (total - 1) // 10 + 1

    keyboard = []
    for pid, name, _, _ in participants:
        keyboard.append([InlineKeyboardButton(text=f"‚ùå {name}", callback_data=f"confirm_delete_{pid}")])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")])
    if page > 0 or page < pages - 1:
        pagination = []
        if page > 0:
            pagination.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"del_page_{category}_{page-1}"))
        if page < pages - 1:
            pagination.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"del_page_{category}_{page+1}"))
        keyboard.append(pagination)

    text = f"–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏—Ü—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ({get_category_name(category)}, —Å—Ç—Ä. {page+1}/{pages}):"
    try:
        if callback.message.photo:
            await callback.message.edit_caption(caption=text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        else:
            await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–¥–∞–ª–µ–Ω–∏—è: {e}")

@dp.callback_query(F.data.startswith("del_page_"))
async def paginate_delete(callback: CallbackQuery):
    try:
        _, cat, page = callback.data.split("_")
        await show_delete_page(callback, int(cat), int(page))
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

@dp.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_menu())
    await callback.answer()
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ.")

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete(callback: CallbackQuery):
    participant_id = int(callback.data.split("_")[2])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"do_delete_{participant_id}")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
    ])
    await callback.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —É—á–∞—Å—Ç–Ω–∏—Ü—É?", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("do_delete_"))
async def do_delete(callback: CallbackQuery, state: FSMContext):
    participant_id = int(callback.data.split("_")[2])
    if delete_participant(participant_id):
        await callback.message.edit_text("‚úÖ –£—á–∞—Å—Ç–Ω–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=get_admin_menu())
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_admin_menu())
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "category")
async def back_to_category(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category = data.get("category")

    # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—á–∞—Å—Ç–Ω–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
    photo_msg_ids = data.get("photo_msg_ids", [])
    for msg_id in photo_msg_ids:
        try:
            await bot.delete_message(callback.message.chat.id, msg_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ: {e}")

    # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
    rating_photo_msg_ids = data.get("rating_photo_msg_ids", [])
    for msg_id in rating_photo_msg_ids:
        try:
            await bot.delete_message(callback.message.chat.id, msg_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ: {e}")

    if not category:
        await state.clear()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_menu())
        await callback.answer()
        return

    await callback.message.edit_text(
        f"{get_category_name(category)}. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=get_category_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "start")
async def back_to_start(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photo_msg_ids = data.get("photo_msg_ids", [])
    for msg_id in photo_msg_ids:
        try:
            await bot.delete_message(callback.message.chat.id, msg_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")

    rating_photo_msg_ids = data.get("rating_photo_msg_ids", [])
    for msg_id in rating_photo_msg_ids:
        try:
            await bot.delete_message(callback.message.chat.id, msg_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")

    await state.clear()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_menu())
    await callback.answer()

@dp.callback_query(F.data == "show_categories")
async def show_categories(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_menu())
    await callback.answer()


@dp.message(F.text == "üè† –ì–ª–∞–≤–Ω–∞—è")
async def main_menu_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    photo_msg_ids = data.get("photo_msg_ids", [])
    for msg_id in photo_msg_ids:
        try:
            await bot.delete_message(message.chat.id, msg_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–ì–ª–∞–≤–Ω–∞—è': {e}")


    rating_photo_msg_ids = data.get("rating_photo_msg_ids", [])
    for msg_id in rating_photo_msg_ids:
        try:
            await bot.delete_message(message.chat.id, msg_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–ì–ª–∞–≤–Ω–∞—è': {e}")

    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_menu())



@dp.message(F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
async def rating_handler(message: Message, state: FSMContext):
    await state.update_data(rating_mode=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:", reply_markup=get_main_menu())
    await message.answer(text=".", reply_markup=get_main_reply_keyboard())

@dp.message(F.text == "üó≥Ô∏è –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å")
async def vote_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    category = data.get("category")
    
    if not category:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
        return
    
    participants = get_participants(category)
    if not participants:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏—Ü –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
        return

    user_vote = get_user_vote(message.from_user.id)
    if user_vote:
        voted_part = next((p for p in participants if p[0] == user_vote), None)
        result = f"‚úÖ –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {voted_part[1]}." if voted_part else "–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏."
        await message.answer(result)
        return


    media_group = []
    for pid, name, photo_file, votes in participants:
        photo_path = PHOTOS_DIR / photo_file
        if photo_path.exists():
            media_group.append(
                InputMediaPhoto(
                    media=FSInputFile(photo_path),
                    caption=f"üó≥Ô∏è {name}\n–ì–æ–ª–æ—Å–æ–≤: {votes}"
                )
            )
    
    if media_group:
        sent_messages = await message.answer_media_group(media_group)
        msg_ids = [msg.message_id for msg in sent_messages]
    else:
        msg_ids = []

 
    keyboard = []
    for pid, name, _, _ in participants:
        keyboard.append([InlineKeyboardButton(text=f"üó≥Ô∏è {name}", callback_data=f"vote_for_{pid}")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="category")])
    
    vote_msg = await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏—Ü—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

    await state.update_data(vote_msg_id=vote_msg.message_id, photo_msg_ids=msg_ids)


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def admin_add_handler(message: Message, state: FSMContext):
    await state.set_state(AdminForm.choosing_category_for_add)
    await message.answer("–í –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏—Ü—É?", reply_markup=get_categories_menu("add"))

@dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
async def admin_delete_handler(message: Message, state: FSMContext):
    await state.set_state(AdminForm.choosing_category_for_delete)
    await message.answer("–ò–∑ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏—Ü—É?", reply_markup=get_categories_menu("delete"))



@dp.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_admin_menu())
    await callback.answer()

@dp.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    try:
        with sqlite3.connect(DATABASE) as conn:
            cursor = conn.cursor()
            
 
            cursor.execute("SELECT COUNT(*) FROM participants")
            total_participants = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM votes")
            total_votes = cursor.fetchone()[0]
            
    
            cursor.execute("SELECT category, COUNT(*) FROM participants GROUP BY category")
            category_stats = cursor.fetchall()
            
   
            cursor.execute("SELECT name, votes, category FROM participants ORDER BY votes DESC LIMIT 5")
            top_participants = cursor.fetchall()
            
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–∫—É—Ä—Å–∞:**

üë• **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏—Ü: {total_participants}
‚Ä¢ –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {total_votes}

üìà **–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**
"""
        
        for category, count in category_stats:
            stats_text += f"‚Ä¢ {get_category_name(category)}: {count} —É—á–∞—Å—Ç–Ω–∏—Ü\n"
        
        if top_participants:
            stats_text += "\nüèÜ **–¢–æ–ø-5 —É—á–∞—Å—Ç–Ω–∏—Ü:**\n"
            for i, (name, votes, category) in enumerate(top_participants, 1):
                stats_text += f"{i}. {name} ({get_category_name(category)}) - {votes} –≥–æ–ª–æ—Å–æ–≤\n"
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
            ]),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]
            ])
        )
    await callback.answer()

@dp.message(Command("set_channel_id"))
async def set_channel_id_cmd(message: Message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_channel_id -100XXXXXXXXXX")
        return
    try:
        cid = int(parts[1])
        if save_channel_id(cid):
            global CHANNEL_ID, CHANNEL_LINK
            CHANNEL_ID = cid
            CHANNEL_LINK = await generate_channel_link(CHANNEL_ID)
            save_channel_link(CHANNEL_LINK)
            suffix = f"\n–°—Å—ã–ª–∫–∞: {CHANNEL_LINK}" if CHANNEL_LINK else "\n–°—Å—ã–ª–∫—É –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω—É–∂–µ–Ω @username –∏–ª–∏ –ø—Ä–∞–≤–æ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–∞)."
            await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª –ø—Ä–∏–≤—è–∑–∞–Ω: {cid}{suffix}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å channel_id")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç channel_id. –ü—Ä–∏–º–µ—Ä: -1001234567890")



@dp.callback_query(F.data == "bind_channel")
async def ask_bind_channel(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminForm.waiting_for_channel_bind)
    text = (
        "üîó –ü—Ä–∏–≤—è–∑–∫–∞ –∫–∞–Ω–∞–ª–∞\n\n"
        "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –õ–Æ–ë–û–ô –ø–æ—Å—Ç –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –µ–≥–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
        "–°–æ–≤–µ—Ç: –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ –∫–∞–Ω–∞–ª–µ."
    )
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")]]))
    await callback.answer()

@dp.message(AdminForm.waiting_for_channel_bind)
async def bind_channel_from_forward(message: Message, state: FSMContext):
    channel_id_from_forward = None
    try:
        fo = getattr(message, "forward_origin", None)
        if fo and getattr(fo, "type", None) == "channel":
            chat_obj = getattr(fo, "chat", None)
            if chat_obj and getattr(chat_obj, "id", None):
                channel_id_from_forward = chat_obj.id
        if channel_id_from_forward is None:
            ffc = getattr(message, "forward_from_chat", None)
            if ffc and getattr(ffc, "id", None):
                channel_id_from_forward = ffc.id
    except Exception:
        channel_id_from_forward = None

    if channel_id_from_forward is None:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–Ω–∞–ª. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –∏–º–µ–Ω–Ω–æ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ (–Ω–µ —Å–∫—Ä–∏–Ω –∏ –Ω–µ —Å—Å—ã–ª–∫—É).", reply_markup=get_admin_menu())
        return

    if save_channel_id(channel_id_from_forward):
        global CHANNEL_ID, CHANNEL_LINK
        CHANNEL_ID = channel_id_from_forward
        CHANNEL_LINK = await generate_channel_link(CHANNEL_ID)
        save_channel_link(CHANNEL_LINK)
        suffix = f"\n–°—Å—ã–ª–∫–∞: {CHANNEL_LINK}" if CHANNEL_LINK else "\n–°—Å—ã–ª–∫—É –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω—É–∂–µ–Ω @username –∏–ª–∏ –ø—Ä–∞–≤–æ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–∞)."
        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª –ø—Ä–∏–≤—è–∑–∞–Ω: {CHANNEL_ID}{suffix}", reply_markup=get_admin_menu())
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å channel_id", reply_markup=get_admin_menu())

@dp.callback_query(F.data == "check_subscription")
async def check_subscription(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if CHANNEL_ID is None:
        prompt = (
            "‚ÑπÔ∏è –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n"
            "–°–¥–µ–ª–∞–π—Ç–µ –æ–¥–Ω–æ –∏–∑:\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_channel_id -100XXXXXXXXXX\n"
            "‚Ä¢ –í –∞–¥–º–∏–Ω–∫–µ –Ω–∞–∂–º–∏—Ç–µ 'üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª' –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç."
        )
        try:
            await callback.message.edit_text(prompt)
        except TelegramBadRequest:
            await callback.message.answer(prompt)
        await callback.answer()
        return

    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        if member.status in ("member", "administrator", "creator"):
            try:
                await callback.message.edit_text(
                    "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–ù–µ–¥–µ–ª—å–Ω–∞—è –Ω–æ–º–∏–Ω–∞—Ü–∏—è", callback_data="category_1")],
                        [InlineKeyboardButton(text="–ú–µ—Å—è—á–Ω–∞—è –Ω–æ–º–∏–Ω–∞—Ü–∏—è", callback_data="category_2")]
                    ])
                )
            except TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    await callback.message.answer(
                        "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="–ù–µ–¥–µ–ª—å–Ω–∞—è –Ω–æ–º–∏–Ω–∞—Ü–∏—è", callback_data="category_1")],
                            [InlineKeyboardButton(text="–ú–µ—Å—è—á–Ω–∞—è –Ω–æ–º–∏–Ω–∞—Ü–∏—è", callback_data="category_2")]
                        ])
                    )
                else:
                    raise
            await state.set_state(None)
        else:
            raise Exception("Not subscribed")
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        link = load_channel_link() or ""
        link_html = f"<a href=\"{link}\">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª</a>\n\n" if link else ""
        prompt_text = (
            "‚ùóÔ∏è–ß—Ç–æ–±—ã –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞.\n\n"
            "–ï—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π ‚Äî —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ bot –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º.\n\n"
            f"{link_html}"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        try:
            await callback.message.edit_text(
                prompt_text,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]]
                ),
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        except TelegramBadRequest as e2:
            if "message is not modified" in str(e2):
                await callback.message.answer(
                    prompt_text,
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[[InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]]
                    ),
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
            else:
                raise
    except Exception:
        link = load_channel_link() or ""
        link_html = f"<a href=\"{link}\">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª</a>\n\n" if link else ""
        prompt_text = (
            "‚ùóÔ∏è–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.\n\n"
            f"{link_html}"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        try:
            await callback.message.edit_text(
                prompt_text,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]]
                ),
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        except TelegramBadRequest as e3:
            if "message is not modified" in str(e3):
                await callback.message.answer(
                    prompt_text,
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[[InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]]
                    ),
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
            else:
                raise
    finally:
        await callback.answer()


async def main():
    init_db()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())